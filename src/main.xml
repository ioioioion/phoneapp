<?xml version="1.0" encoding="utf-8"?>
<program xmlns="http://www.kinoma.com/kpr/1">
    <require path="mobile/dialog" id="DIALOG"/>
    <require path="mobile/model" id="MODEL"/>
    <require path="themes/sample/theme" id="THEME"/>
    <require path="mobile/keyboard" id="KEYBOARD"/>
    <variable id="humi_exp" value="0"/>
    <variable id="temp_min" value="0"/>
    <variable id="temp_max" value="0"/>
   	<variable id="lumi_exp" value="0"/>
    <variable id="led_auto" value="0"/>
    <variable id="water_auto" value="0"/>
    <variable id="temp_Info" value="0"/>
    <variable id="lumi_Info" value="0"/>
    <variable id="humi_Info" value="0"/>
    <!-- ASSETS -->
    <skin id="backgroundSkin" color="#000000"/>
    <skin id="graySkin" color="#888888"/>
    <skin id="button_temp_Skin" color="#2B5797"/>
    <skin id="button_wet_Skin" color="#1E7145"/>
    <skin id="button_light_Skin" color="#FFC40D"/>

    <skin id="button_temp_Skin_L" color="#603CBA"/>
    <skin id="button_wet_Skin_L" color="#DA532C"/>
    <skin id="button_light_Skin_L" color="#00ABA9"/>
    <skin id="button_water_Skin" color="#1D1D1D"/>
    <skin id="button_water_Skin_L" color="#1D1D1D"/>
    <skin id="button_led_Skin" color="#1D1D1D"/>
    <skin id="button_setting_Skin" color="#1D1D1D"/>

    <skin id="button_led_Skin_L" color="#1D1D1D"/>
    <skin id="hiliteSkin" color="#333333"/>
    <skin id="dummuSkin" color="red"/>

    <style id="leftStyle" font="24px" color="white" align="center,left"/>
    <style id="rightStyle" font="bold 24px" color="white" align="center,right"/>
    <style id="middleStyle" font="bold 26px" color="white" align="center,middle"/>

    <handler path="/pull">
    	<behavior>
    		<method id="onInvoke" params="handler, message"><![CDATA[
                //Receives result and passes to main container.
                var saeurl = "http://xijincheng.sinaapp.com/kinoma";
				var message_sae = new Message(saeurl);
				message_sae.method = "GET";
				handler.invoke(message_sae, Message.JSON);           
			]]></method>
            <method id="onComplete" params="handler, message, json"><![CDATA[
                //Receives result and passes to main container.
                if(json!=undefined){
                	if(json.temp_min!=null){
                		temp_min=json.temp_min;
                		application.distribute( "mintempChanged");
                	}
                	if(json.temp_max!=null){
                		temp_max=json.temp_max;
                		application.distribute( "maxtempChanged");
                	}
                	if(json.lumi_exp!=null){
                		lumi_exp=json.lumi_exp;
                		application.distribute( "lumiChanged");
                	}
                	if(json.humi_exp!=null){
                		humi_exp=json.humi_exp;
                		application.distribute( "humiChanged");
                	}
                	if(json.lumi_auto!=null){
                		led_auto=json.lumi_auto;
                		application.distribute( "lumi_autoChanged");
                		application.distribute( "lumi_auto_numChanged");
                	}
                	if(json.humi_auto!=null){
                		water_auto=json.humi_auto;
                		application.distribute( "humi_autoChanged");
                		application.distribute( "humi_auto_numChanged");
                	}
                	
                	if(json.humi!=null){
                		humi_Info=json.humi;
                		application.distribute( "humi_InfoChanged");
                	}
                	if(json.temp!=null){
                		temp_Info=json.temp;
                		application.distribute( "temp_InfoChanged");
                	}
                	if(json.lumi!=null){
                		lumi_Info=json.lumi;
                		application.distribute( "lumi_InfoChanged");
                	}
            
               
 /*               
                application.distribute( "maxtempChanged", temp_max );
                application.distribute( "mintempChanged", temp_min );
                application.distribute( "humiChanged", humi_exp );
                application.distribute( "lumiChanged", lumi_exp );
*/              
     		 

              }
            ]]></method>
        </behavior>
    </handler>
    
    
    
    <behavior id="LabelBehavior_max_temp">
        <method id="onCreate" params="label">
            label.coordinates = {top:0, bottom:0, left:0, right:0};
            label.skin = button_temp_Skin_L;
            label.style = middleStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_temp_Skin_L;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
            trace(label.string);
        </method>
    </behavior>
    <behavior id="LabelBehavior_min_temp">
        <method id="onCreate" params="label">
            label.coordinates = {top:0, bottom:0, left:0, right:0};
            label.skin = button_temp_Skin_L;
            label.style = middleStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_temp_Skin_L;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
    </behavior>
    <behavior id="LabelBehavior_exp_humi">
        <method id="onCreate" params="label">
            label.coordinates = {top:0, bottom:0, left:0, right:0};
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
            application.distribute( "exp_humi_pressed");
        </method>
        <method id="onTouchEnded" params="label">
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
            label.invoke(new Message("/water_setting"));
        </method>
    </behavior>
    <behavior id="LineBehavior_exp_humi">
        <method id="onCreate" params="line">
            line.skin = button_wet_Skin_L;
        </method>
        <method id="onTouchBegan" params="line">
        </method>
        <method id="onTouchEnded" params="line">
            this.onTap(line);
        </method>
        <method id="onTap" params="line">

        </method>
        <method id="exp_humi_pressed" params="line">
            line.skin = hiliteSkin;
        </method>
        <method id="humi_autoChanged" params="line">
            if(water_auto==0)
                line.skin = graySkin;
            else 
                line.skin = button_wet_Skin_L;
        </method>
    </behavior>
    <behavior id="LabelBehavior_exp_lumi">
        <method id="onCreate" params="label">
            label.coordinates = {top:0, bottom:0, left:0, right:0};
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
            application.distribute( "exp_lumi_pressed");            
        </method>
        <method id="onTouchEnded" params="label">
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
            label.invoke(new Message("/light_setting"));
        </method>       
    </behavior>
    <behavior id="LineBehavior_exp_lumi">
        <method id="onCreate" params="line">
            line.skin = graySkin;
        </method>
        <method id="onTouchBegan" params="line">
        </method>
        <method id="onTouchEnded" params="line">
            this.onTap(line);
        </method>
        <method id="onTap" params="line">
        </method>
        <method id="exp_lumi_pressed" params="line">
            line.skin = hiliteSkin;
        </method>
        <method id="lumi_auto_numChanged" params="line">
            if(led_auto==0)
                line.skin = graySkin;
            else 
                line.skin = button_light_Skin_L;
        </method>
    </behavior>
    <behavior id="LabelBehavior_temp">
        <method id="onCreate" params="label">
            label.coordinates = {top:0, bottom:0, left:0, right:0};
            label.skin = button_temp_Skin;
            label.style = middleStyle;
            label.active = true;
        </method>
    </behavior>
        <behavior id="LabelBehavior_temp_num">
        <method id="onCreate" params="label">
            label.coordinates = {top:0, bottom:0, left:0, right:0};
            label.skin = button_temp_Skin;
            label.style = middleStyle;
            label.active = true;
        </method>
        <method id="temp_InfoChanged" params="label"><![CDATA[
             label.string = temp_Info + " Â°C";
     ]]></method>
    </behavior>
    
    <behavior id="LabelBehavior_humi">
        <method id="onCreate" params="label">
            label.coordinates = {top:0, bottom:0, left:0, right:0};
            label.skin = button_wet_Skin;
            label.style = middleStyle;
            label.active = true;
        </method>
    </behavior>
    <behavior id="LabelBehavior_humi_num">
        <method id="onCreate" params="label">
            label.coordinates = {top:0, bottom:0, left:0, right:0};
            label.skin = button_wet_Skin;
            label.style = middleStyle;
            label.active = true;
        </method>
        <method id="humi_InfoChanged" params="label"><![CDATA[
             label.string = humi_Info + " %";
     ]]></method>
    </behavior>
    
    <behavior id="LabelBehavior_lumi">
        <method id="onCreate" params="label">
            label.coordinates = {top:0, bottom:0, left:0, right:0};
            label.skin = button_light_Skin;
            label.style = middleStyle;
            label.active = true;
        </method>
    </behavior>
    
    <behavior id="LabelBehavior_lumi_num">
        <method id="onCreate" params="label">
            label.coordinates = {top:0, bottom:0, left:0, right:0};
            label.skin = button_light_Skin;
            label.style = middleStyle;
            label.active = true;
        </method>
        <method id="lumi_InfoChanged" params="label"><![CDATA[
             label.string = lumi_Info + " lx";
     ]]></method>
    </behavior>
    
    
    
    
     <behavior id="ButtonBehavior_setting">
        <method id="onCreate" params="label">
            label.coordinates = {top:0, bottom:0, left:0, right:0};
            label.skin = button_setting_Skin;
            label.style = middleStyle;
            label.active = true;
            label.interval = 2000;
            label.start(); 
        </method>
        <method id="onTouchBegan" params="label">
            label.skin = hiliteSkin;
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_setting_Skin;
            this.onTap(label);
        </method>
        <method id="onTimeChanged" params="label"><![CDATA[
                label.invoke(new Message("/pull"));
         ]]></method>
    </behavior>
	<container id="MainScreen" top="0" left="0" bottom="0" right="0" skin="backgroundSkin">
	    <column top="0" left="0" bottom="0" right="0">
            <line top="2" left="2" bottom="0" right="2">
                <label string="'Temperature'">
                    <behavior like="LabelBehavior_temp">
                    </behavior>
                </label>
                <label string="'50 Â°C'">
                    <behavior like="LabelBehavior_temp_num">
                    </behavior>
                </label>
            </line>
            <line top="2" left="2" bottom="0" right="2">
                <label string="'Min:0 Â°C'">
                    <behavior like="LabelBehavior_min_temp">
                        <method id="mintempChanged" params="label"><![CDATA[
                   			 label.string= "Min:" + temp_min + " Â°C";
    					 ]]></method>
                    </behavior>
                </label>
                <label string="'Max:0 Â°C'">
                    <behavior like="LabelBehavior_max_temp">
                        <method id="onTap" params="label">label.invoke(new Message("/temp_setting"));</method>
                        <method id="maxtempChanged" params="label"><![CDATA[
                   			 label.string= "Max:" + temp_max + " Â°C";
    					 ]]></method>
                    </behavior>
                </label>
            </line>
            <line top="2" left="2" bottom="0" right="2">
                <label string="'Soil Humidity'">
                    <behavior like="LabelBehavior_humi">
                    </behavior>
                </label>
                <label string="'50 %'">
                    <behavior like="LabelBehavior_humi_num">
                    </behavior>
                </label>
            </line>
            <line top="2" left="2" bottom="0" right="2">
                <label string="'Luminance'">
                    <behavior like="LabelBehavior_lumi">
                    </behavior>
                </label>
                <label string="'0 lx'">
                    <behavior like="LabelBehavior_lumi_num">
                    </behavior>
                </label>
            </line>
            <line top="2" left="2" bottom="0" right="2">
                <behavior like="LineBehavior_exp_humi">
                </behavior>
                <label string="'Exp Humidity'" style = "middleStyle">
                    <behavior like="LabelBehavior_exp_humi">
                    </behavior>
                </label>
                <label string="'0 %'" style = "middleStyle">
                    <behavior like="LabelBehavior_exp_humi"  >
                        <method id="humiChanged" params="label"><![CDATA[
                   			 label.string= humi_exp + " %";
    					 ]]></method>
                    </behavior>
                </label>
            </line>
            <line top="2" left="2" bottom="0" right="2">
                <behavior like="LineBehavior_exp_lumi">
                </behavior>
                <label string="'Exp Luminance'" style = "middleStyle">
                    <behavior like="LabelBehavior_exp_lumi" >
                    </behavior>
                </label>
                <label string="'0 lx'" style = "middleStyle">
                    <behavior like="LabelBehavior_exp_lumi">
                        <method id="lumiChanged" params="label"><![CDATA[
                   			 label.string= lumi_exp + " lx";
    					 ]]></method>
                    </behavior>
                </label>
            </line>
            <line top="2" left="2" bottom="2" right="2">
	            <label string="'Setting'">
	                <behavior like="ButtonBehavior_setting">
                        <method id="onTap" params="label">label.invoke(new Message("/setting"));</method>
	                </behavior>
	            </label>
	        </line>
	    </column>
	</container>
    <script>
        <![CDATA[
            application.behavior = new MODEL.ApplicationBehavior( application );
    		application.add( new MainScreen() );
        ]]>
    </script>
    
    
    <handler path="/setting">
        <behavior like="MODEL.DialogBehavior">
             <method id="onDescribe" params="query">
                return {
                    Dialog: DIALOG.Box,
                    title: "Setting",
                    items: [
                        {
                            Item: DIALOG.Slider,
                            id: "humi_exp",
                            label: "Set Humidity",
                            min: 0,
                            max: 100,
                            value: humi_exp,
                            toString: function(val) { return Math.floor(val); }, 
                        },
                        {
                            Item: DIALOG.Slider,
                            id: "lumi_exp",
                            label: "Set Luminance",
                            min: 0,
                            max: 10000,
                            value: lumi_exp,
                            toString: function(val) { return Math.floor(val); }, 
                        },
                        {
                            Item: DIALOG.Slider,
                            id: "temp_min",
                            label: "Set Temperature Min",
                            min: 0,
                            max: 50,
                            value: temp_min,
                            toString: function(val) { return Math.floor(val); }, 
                        },
                        {
                            Item: DIALOG.Slider,
                            id: "temp_max",
                            label: "Set Temperature Max",
                            min: 0,
                            max: 50,
                            value: temp_max,
                            toString: function(val) { return Math.floor(val); }, 
                        }
                        
                    ],
                    ok: "Comfirm",
                    cancel: "Close",
                    action: "/setting_handler",
                };
            </method>
        </behavior>
    </handler> 
    
    <handler path="/setting_handler">
        <behavior like="MODEL.CommandBehavior">
            <method id="onQuery" params="handler, query">
                <![CDATA[
                for (var key in query) {
                    switch(key){
                        case "temp_max":var po_temp_max = eval(query[key]).toFixed(0);break;
                        case "temp_min":var po_temp_min = eval(query[key]).toFixed(0);break;
                        case "lumi_exp":var po_lumi_exp = eval(query[key]).toFixed(0);break;
                        case "humi_exp":var po_humi_exp = eval(query[key]).toFixed(0);break;
                    }  
                }
                var saeurl = "http://xijincheng.sinaapp.com/phone";
				var message_sae = new Message(saeurl);
				message_sae.method = "POST";
				message_sae.requestText = encodeURI("humi_exp="+po_humi_exp+"&lumi_exp="+po_lumi_exp+"&temp_max="+po_temp_max+"&temp_min="+po_temp_min);
				message_sae.setRequestHeader("Content-Length", message_sae.requestText.length);
				message_sae.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
				handler.invoke(message_sae, Message.TEXT);           
            ]]>
            </method>
            <method id="onComplete" params="handler, message, text"><![CDATA[
           //     trace(text);
            ]]></method>
        </behavior>
    </handler>
    <handler path="/light_setting">
        <behavior>
            <method id="onInvoke" params="handler, message">
                <![CDATA[
                
                if (led_auto==0) 
                	var unled_auto=1;
                else 
                	var unled_auto=0;
                var saeurl = "http://xijincheng.sinaapp.com/phone";
				var message_sae = new Message(saeurl);
				message_sae.method = "POST";
				message_sae.requestText = encodeURI("lumi_auto="+unled_auto);
				message_sae.setRequestHeader("Content-Length", message_sae.requestText.length);
				message_sae.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
				handler.invoke(message_sae, Message.TEXT);           
            ]]>
            </method>
            <method id="onComplete" params="handler, message, text"><![CDATA[
            //    trace(text);
            ]]></method>
        </behavior>
    </handler>
    
    <handler path="/water_setting">
        <behavior>
            <method id="onInvoke" params="handler, message">
                <![CDATA[
                
                if (water_auto==0) 
                	var unwater_auto=1;
                else 
                	var unwater_auto=0;
                var saeurl = "http://xijincheng.sinaapp.com/phone";
				var message_sae = new Message(saeurl);
				message_sae.method = "POST";
				message_sae.requestText = encodeURI("humi_auto="+unwater_auto);
				message_sae.setRequestHeader("Content-Length", message_sae.requestText.length);
				message_sae.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
				handler.invoke(message_sae, Message.TEXT);           
            ]]>
            </method>
            <method id="onComplete" params="handler, message, text"><![CDATA[
            //    trace(text);
            ]]></method>
        </behavior>
    </handler>
</program>